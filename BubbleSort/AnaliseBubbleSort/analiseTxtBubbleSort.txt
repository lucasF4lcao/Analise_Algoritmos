==================================================================================================================================================================================================
Melhor Caso:

O custo será o número de comparações.

function bubbleSort(arr) {			custo		vezes		subtotal		T(n) = 1 + n + n-1 + 1 = 2n + 1 --> O(n)
1.  var n = arr.length				0
2.  for (var i = 0; i < n - 1; i++) {		1		1		1*1
3.    var swapped = false			0
4.    var j = 0					0
5.    while (j < n - i - 1) {			1		n		1*n
6.      if (arr[j] > arr[j + 1]) {		1		n-1		1*n-1
7.        var temp = arr[j]			0
8.        arr[j] = arr[j + 1]			0
9.        arr[j + 1] = temp			0
10.       swapped = true}			0
11.     j++}					0
12.   if (!swapped) {				1		1		1*1
13.     break}}					0
14.  return arr}				0


Análise de execução:
						linha 2		linha 5		linha 6		linha 12		Total linha 2: 1 = constante
 Início:					executou?	executou?	executou?	executou?	
	[1,	2,	3,	4]		sim		não		não		não			Total linha 5: 4 = n
	i=0
	j=0														Total linha 6: 3 = n - 1

 j < 4 - 0 - 1 e 0 < 1, então:												Total linha 12: 1 = constante
	[1,	2,	3,	4]		não		sim		sim		não			
	i=0    j=1


 j < 4 - 0 - 1 e 1 < 2, então:
	[1,	2,	3,	4]		não		sim		sim		não
	i=0            j=2


 j < 4 - 0 - 1 e 2 < 3, então:
	[1,	2,	3,	4]		não		sim		sim		não            	       
	i=0                    j=3


 j = 4 - 0 - 1 e swapped = false, então:
	[1,	2,	3,	4]		não		sim		não		sim
	

 Fim.

=============================================================================================================================================================================================
Pior Caso:

O custo será o número de comparações.

function bubbleSort(arr) {			custo		vezes		subtotal		T(n) = n + (n(n+1))/2 + (n(n-1))/2 + n
1.  var n = arr.length				0							     = 2n + (n(n+1)+n(n-1))/2
2.  for (var i = 0; i < n - 1; i++) {		1		n		1*n			     = 2n + (n^2+n+n^2-n)/2 
3.    var swapped = false			0							     = 2n + (2n^2)/2	
4.    var j = 0					0							     = n^2 + 2n --> O(n^2)	
5.    while (j < n - i - 1) {			1		(n(n+1))/2	1*(n(n+1))/2
6.      if (arr[j] > arr[j + 1]) {		1		(n(n-1))/2	1*(n(n-1))/2
7.        var temp = arr[j]			0
8.        arr[j] = arr[j + 1]			0
9.        arr[j + 1] = temp			0
10.        swapped = true}			0
11.      j++}					0
12.    if (!swapped) {				1		n		1*n
13.      break}}				0
14.  return arr}				0


Análise de execução:
						linha 2		linha 5		linha 6		linha 12		Total linha 2: 4 = n
 Início:					executou?	executou?	executou?	executou?	
	[4,	3,	2,	1]		sim		não		não		não			Total linha 5: 1 + 2 + 3 + 4 = 10 = 1 + 2 ... + n = (n(n+1))/2
	i=0
	j=0														Total linha 6: 3 + 2 + 1 = 6 = (n-1) + (n-2) ... + 1 = (n(n-1))/2

 j < 4 - 0 - 1 e 4 > 3, então:												Total linha 12: 4 = n
	[3,	4,	2,	1]		não		sim		sim		não
	i=0    j=1


 j < 4 - 0 - 1 e 4 > 2, então:
	[3,	2,	4,	1]		não		sim		sim		não
	i=0            j=2


 j < 4 - 0 - 1 e 4 > 1, então:
	[3,	2,	1,	4]		não		sim		sim		não
	i=0                    j=3


 j = 4 - 0 - 1 e swapped = true e i < 4, então:
	[3,	2,	1,	4]		sim		sim		não		sim
	j=0    i=1


 j < 4 - 1 - 1 e 3 > 2, então:
	[2,	3,	1,	4]		não		sim		sim		não
	       i=1
	       j=1

 j < 4 - 1 - 1 e 3 > 1, então:
	[2,	1,	3,	4]		não		sim		sim		não
	       i=1     j=2

 j = 4 - 1 - 1 e swapped = true e i < 4, então:
	[2,	1,	3,	4]		sim		sim		não		sim
	j=0            i=2     


 j < 4 - 2 - 1 e 2 > 1, então: 
	[1,	2,	3,	4]		não		sim		sim		não
	       j=1     i=2


 j = 4 - 2 - 1 e swapped = true e i < 4, então:
	[1,	2,	3,	4]		sim		sim		não		sim
	j=0                    i=3 


 j = 4 - 3 - 1 e swapped = false, então:
	[1,	2,	3,	4]		não		sim		não		sim
   

 Fim.
=============================================================================================================================================================================================